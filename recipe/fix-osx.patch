diff --git a/cmake/CMakeConfig.cmake.in b/cmake/CMakeConfig.cmake.in
index 82cb1e6..0903872 100644
--- a/cmake/CMakeConfig.cmake.in
+++ b/cmake/CMakeConfig.cmake.in
@@ -102,8 +102,7 @@ set(PIXSFM_LINK_DIRS
 
 set(PIXSFM_INTERNAL_LIBRARIES
     HighFive
-    pybind11::module
-    pybind11::embed
+    pybind11::pybind11
 )
 
 set(PIXSFM_EXTERNAL_LIBRARIES
diff --git a/CMakeLists.txt b/CMakeLists.txt
index d85e3dc..00af0b8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,7 +18,7 @@ include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CMakeHelper.cmake NO_POLICY_SCOPE)
 # Options
 ################################################################################
 option(TESTS_ENABLED "Whether to build test binaries" ON)
-option(AVX2_ENABLED "Whether to compile with AVX2 support" ON)
+option(AVX2_ENABLED "Whether to compile with AVX2 support" OFF)
 
 if(TESTS_ENABLED)
     enable_testing()
@@ -107,8 +107,8 @@ set(PIXSFM_EXTERNAL_LIBRARIES
 
 set(PIXSFM_INTERNAL_LIBRARIES
   HighFive
-  pybind11::module
-  pybind11::embed
+  pybind11::pybind11
+  
 )
 
 include_directories(
@@ -119,7 +117,7 @@ include_directories(
 
 link_directories(${PIXSFM_LINK_DIRS})
 
-set(PYBIND11_INSTALL ON)
+set(PYBIND11_INSTALL OFF)
 add_subdirectory(third-party)
 add_subdirectory(pixsfm)
 
diff --git a/pixsfm/base/src/interpolation.h b/pixsfm/base/src/interpolation.h
index 92e8c7b..f4d0058 100644
--- a/pixsfm/base/src/interpolation.h
+++ b/pixsfm/base/src/interpolation.h
@@ -18,6 +18,7 @@ namespace py = pybind11;
 #include <string>
 #include <utility>
 #include <vector>
+#include <type_traits>
 
 #include "base/src/cubic_hermite_spline_simd.h"
 
@@ -115,13 +116,6 @@ class Interpolator {
     }
   }
 
-  // The following two Evaluate overloads are needed for interfacing
-  // with automatic differentiation. The first is for when a scalar
-  // evaluation is done, and the second one is for when Jets are used.
-  void Evaluate(const double& r, const double& c, double* f) const {
-    return Evaluate(r, c, f, NULL, NULL);
-  }
-
   void IEvaluate(double r, double c, double* f, double* dfdr,
                  double* dfdc) const {
     return Evaluate(r, c, f, dfdr, dfdc);
@@ -139,6 +133,15 @@ class Interpolator {
     }
   }
 
+  // The following two Evaluate overloads are needed for interfacing
+  // with automatic differentiation. The first is for when a scalar
+  // evaluation is done, and the second one is for when Jets are used.
+  template <>
+  void Evaluate(const double& r, const double& c, double* f) const {
+    return Evaluate(r, c, f, NULL, NULL);
+    //Without template specialization it does not work with Clang
+  }
+
   virtual int OutputDimension() const { return Grid::DATA_DIMENSION; }
 
  protected:
diff --git a/pixsfm/bundle_adjustment/src/reference_extractor.h b/pixsfm/bundle_adjustment/src/reference_extractor.h
index 70e38a6..4d505b7 100644
--- a/pixsfm/bundle_adjustment/src/reference_extractor.h
+++ b/pixsfm/bundle_adjustment/src/reference_extractor.h
@@ -49,7 +49,7 @@ using Refs = std::unordered_map<colmap::point3D_t, Reference>;
   REGISTER_METHOD(3, 16) \
   REGISTER_METHOD(3, 4)
 
-template <int N_NODES = Eigen::Dynamic>
+template <int N_NODES>
 inline OffsetMatrix3d<N_NODES> NodeOffsets3D(
     const colmap::Image& image, const colmap::Camera& camera,
     const Eigen::Vector3d& xyz, InterpolationConfig& interpolation_config);
diff --git a/pixsfm/util/src/memory.h b/pixsfm/util/src/memory.h
index f12758d..7eec137 100644
--- a/pixsfm/util/src/memory.h
+++ b/pixsfm/util/src/memory.h
@@ -1,5 +1,5 @@
 #pragma once
-#include "sys/sysinfo.h"
+//#include "sys/sysinfo.h"
 #include "sys/types.h"
 
 #include <ceres/ceres.h>
diff --git a/third-party/progressbar.h b/third-party/progressbar.h
index a582b9b..27fe01a 100644
--- a/third-party/progressbar.h
+++ b/third-party/progressbar.h
@@ -90,8 +90,8 @@ class progressbar {
       std::string skip_char;
       std::string opening_bracket_char;
       std::string closing_bracket_char;
-      std::chrono::time_point<std::chrono::high_resolution_clock> last_timepoint;
-      std::chrono::time_point<std::chrono::high_resolution_clock> init_timepoint;
+      std::chrono::time_point<std::chrono::system_clock> last_timepoint;
+      std::chrono::time_point<std::chrono::system_clock> init_timepoint;
 };
 
 #include <iostream>
@@ -163,7 +163,7 @@ void progressbar::reset() {
     update_is_called = false;
     last_perc = 0;
     update();
-    last_timepoint = std::chrono::high_resolution_clock::now();
+    last_timepoint = std::chrono::system_clock::now();
     return;
 }
 
@@ -206,7 +206,7 @@ std::string progressbar::get_update_str() {
     }
 
     // if (perc < last_perc) return;
-    auto now = std::chrono::high_resolution_clock::now();
+    auto now = std::chrono::system_clock::now();
     double gap = std::chrono::duration_cast<std::chrono::milliseconds>(now-last_timepoint).count() / 1000.0;
     // update percentage each unit
     if ((perc > last_perc) || (!update_is_called) || gap > max_gap_sec) {
